---
name: Titanium.UI.Button
summary: |
    A button widget that has four states: normal, disabled, focused and selected.
description: |
    <table id="platformComparison">
      <tr>
        <td><img src="images/button/button_android.png" height="50" /></td>
        <td><img src="images/button/button_ios.png" height="50" /></td>
        <td><img src="images/button/button_wp.png" height="50" /></td>
      </tr>
      <tr><th>Android</th><th>iOS</th><th>Windows Phone</th></tr>
    </table>

    A button displays its  selected state while it is being pressed. The focused state is
    only used on Android devices that have navigation keys or a keyboard, to indicate
    which button has input focus.

    You can specify background images for each state, as well as button text and a button
    icon. On iOS, there are button styles which define appearance for each state, even if
    no button images are set.

    Use the <Titanium.UI.createButton> method or a **`<Button>`** Alloy element to create a button
    (see [Examples](#!/api/Titanium.UI.Button-examples)) .

    #### Android Platform Notes

    Android uses default button images for the normal, focused, selected and disabled
    states. If you use a custom button image, you should specify versions for the focused
    and selected states (and the disabled state, if the button is ever disabled).

    Android also supports setting the background color for each of the states. These are not
    supported on iOS.

    #### iOS Platform Notes

    iOS buttons have two special properties, `style` and `systemButton`.

    The `style` property specifies the type of button decoration, and can be set to one
    of the values described in <Titanium.UI.iOS.SystemButtonStyle>. On iOS 6 and earlier, the
    default `SystemButtonStyle` is [BORDERED](Titanium.UI.iOS.SystemButtonStyle.BORDERED), which
    decorates the button with a rounded rectangle. On iOS 7, the rounded rectangle button has been deprecated.

    <div style="text-align: center; margin-bottom: 10px">
    <div style="display: table-cell; width: 240px">
        <img src="images/button/rounded_rect_button_2x.png"/>
        <p style="font-weight: bold;">iOS 6 rounded rectangle button</p>
    </div>
    <div style="display: table-cell;">
        <img src="images/button/system_button_2x.png"/>
        <p style="font-weight: bold;">iOS 7 system button</p>
    </div>
    </div>

    On iOS 6, button style decorations are drawn above the background gradient and background color,
    and below any background images. This means, for example, that setting the <Titanium.UI.Button.backgroundColor>
    only affects the areas outside the rounded border; on iOS 7, however, setting the background color
    affects the button's entire bounding box area. This difference can produce unexpected results on
    iOS 6 if the button's label color is white, as shown below:

    <div style="text-align: center; margin-bottom: 10px">
    <div style="display: table-cell; width: 240px">
        <img src="images/button/ios6_invisible.png"/>
        <p style="font-weight: bold;">iOS 6 rounded rectangle button</p>
    </div>
    <div style="display: table-cell;">
        <img src="images/button/ios7_good.png"/>
        <p style="font-weight: bold;">iOS 7 system button</p>
    </div>
    </div>

    Depending on the design requirements, there are a couple of solutions to this:

    * To make the button on iOS 6 match the iOS 7 style, set the button's <Titanium.UI.iOS.SystemButtonStyle>
     property to [PLAIN](Titanium.UI.iOS.SystemButtonStyle.PLAIN). This removes all decoration from
     the button so that it looks the same on both types of devices.
    * To make the button on iOS 7 match the rounded rectangle style of iOS 6, set
    <Titanium.UI.iOS.SystemButtonStyle> to [PLAIN](Titanium.UI.iOS.SystemButtonStyle.PLAIN) and
    and assign a custom image to <Titanium.UI.Button.backgroundImage>.

    To use a custom button style, such as a background gradient, you may need to explicitly set
    the button's `style` property to `PLAIN`, to prevent the button style from overriding any background color or gradient.

    Also note:

    * When assigning a custom image to the `backgroundImage` property, the image must be
    partially or wholly transparent for the background color or background gradient to be visible.
    * Similarly, for an assigned background gradient to show through, the `backgroundColor` may need to be
    set to 'transparent'.

    Unlike Android, iOS doesn't supply any default background images for buttons--
    system button styles serve this purpose.

    The `systemButton` property lets you create a predefined system-defined button,
    such as the **Camera** or **Add** buttons, for use in toolbars and nav bars.
    Specifically, system buttons may be used in the following locations:

    * <Titanium.UI.iOS.Toolbar>. The `items` array can contain system buttons.
    * <Titanium.UI.iPad.Popover>. The `leftNavButton` and `rightNavButton` properties can
      refer to system buttons
    * <Titanium.UI.iPad.SplitWindow>. The `toolbar` array can contain system buttons.
    * <Titanium.UI.TextField>. The `keyboardToolbar` array can contain system buttons.
    * <Titanium.UI.TextArea>. The `keyboardToolbar` array can contain system buttons.
    * <Titanium.UI.Window>. The `leftNavButton` and `rightNavButton` properties can refer to
      system buttons and the `toolbar` array can contain system buttons.

    Use the constants in <Titanium.UI.iOS.SystemButton>
    to specify a button type. The size, style and decoration of system buttons is set
    automatically, so you can create a button by setting only the `systemButton` property.

    For example:

        var cancelButton = Ti.UI.createButton({ systemButton: Ti.UI.iOS.SystemButton.CANCEL });

    In Alloy, you can omit the namespace when setting the `systemButton` property:

        <Button id="cancelbtn" systemButton="CANCEL"></Button>

    Note that the `systemButton` property specifies *appearance*, not behavior. For
    example, to bring up the camera when the user presses the **Camera** button, you must
    add an event listener to the button and call <Titanium.Media.showCamera> when the
    button is clicked.

    ##### iOS Pressed Button Effects

    If you do not supply separate background images for the normal and selected states,
    iOS supplies a built-in effect for pressed buttons. For most iOS buttons, the effect
    dims the entire button (except for the text) while the button is being pressed.

    For toolbar buttons that use the [PLAIN](Titanium.UI.iOS.SystemButtonStyle.PLAIN) style
    or use system icons such as [CAMERA](Titanium.UI.iOS.SystemButton.CAMERA), a glow effect is
    used. The glow effect shows as a white circular glow or highlight at the center of the button
    when the button is pressed.

extends: Titanium.UI.View
since: "0.8"
methods:

  - name: add
    description: |
        Adding children to a `Button` is not supported on all platforms.

        If you need to display views on top of this object, consider using
        another view as a container for both this object and the views you want
        to appear on top of it.

        See also: <Titanium.UI.View.add>.
    platforms: [iphone, ipad]

  - name: remove
    description: |
        See also: [add](Titanium.UI.Button.add), <Titanium.UI.View.add>.
    platforms: [iphone, ipad]

properties:
  - name: backgroundImage
    summary: |
        Background image for the button in its normal state, specified as a local file path or URL.
    description: |
        Also sets the background image for the other button states (disabled, focused, selected),
        unless they've been specified explicitly. On iOS, if backgroundDisabledImage is unset, the
        image will appear faded to indicate being disabled. Also on iOS, if backgroundSelectedImage
        is unset, the image will be darkened to indicate being selected.
    type: String


  - name: backgroundDisabledImage
    summary: |
        Background image for the button in its disabled state, specified as a local file path
        or URL.
    description: |
        Also sets the background image for the other button states (normal, focused, selected),
        unless they've been specified explicitly, except for iOS, which requires a backgroundImage.
    type: String
    platforms: [android, iphone, ipad]

  - name: backgroundFocusedImage
    summary: |
        Background image for the button in its focused state, specified as a local file path
        or URL.
    description: |
        Focusable must be true for normal views. Sets the background image for the focused
        state only. For iOS, since there is not a trackball, this does nothing.
    type: String
    platforms: [android, iphone, ipad]

  - name: backgroundSelectedColor
    summary: Selected background color of the view, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>.
    type: String
    platforms: [iphone, ipad, android]
    default: Background color of this view.
    since: {iphone: "6.1.0", ipad: "6.1.0", android: 0.9.0}

  - name: backgroundSelectedImage
    summary: |
        Background image for the button in its selected state, specified as a local file
        path or URL.
    description: |
        On Android, Focusable must be true in order to be selected. Sets the background image for the selected
        state only.
    type: String
    platforms: [android, iphone, ipad]

  - name: color
    summary: Default button text color, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>.
    type: String


  - name: disabledColor
    summary: Text color of the button in its disabled state, as a color name or hex triplet.
    type: String
    since: "3.2.0"
    platforms: [iphone, ipad]

  - name: enabled
    summary: Set to `true` to enable the button, `false` to disable the button.
    type: Boolean
    default: true
    platforms: [android, iphone, ipad ]

  - name: font
    summary: Font to use for the button text.
    type: Font


  - name: image
    summary: Image to display on the button, specified as a local
        path, URL or a `Blob`.
    description: |
        The image is displayed to the left of the title.

        Support for using <Titanium.Blob> for this property is only available on Android and iOS.
    type: [String, Titanium.Blob]

  - name: selectedColor
    summary: Button text color used to indicate the selected state, as a color name or hex triplet.
    description: |
        For information about color values, see the "Colors" section of <Titanium.UI>.
    type: String
    platforms: [iphone,ipad]

  - name: shadowColor
    summary: Shadow color of the [title](Titanium.UI.Button.title), as a color name or hex triplet.
    description: |
        Use in conjunction with [shadowOffset](Titanium.UI.Button.shadowOffset) and [shadowRadius](Titanium.UI.Button.shadowRadius).
        For information about color values, see the "Colors" section of <Titanium.UI>.
    type: String
    platforms: [android]
    since: "3.2.0"

  - name: shadowOffset
    summary: Shadow offset of the [title](Titanium.UI.Button.title), as a dictionary with the properties `x` and `y`.
    description: |
        Use in conjunction with [shadowColor](Titanium.UI.Button.shadowColor) and [shadowRadius](Titanium.UI.Button.shadowRadius).
    type: Dictionary
    platforms: [android]
    since: "3.2.0"

  - name: shadowRadius
    summary: Shadow radius of the [title](Titanium.UI.Button.title).
    description: |
        Use in conjunction with [shadowColor](Titanium.UI.Button.shadowColor) and [shadowOffset](Titanium.UI.Button.shadowOffset).
    type: Number
    platforms: [android]
    since: "3.2.0"

  - name: style
    summary: Style constant for the button, as defined in <Titanium.UI.iOS.SystemButtonStyle>.
    type: Number
    platforms: [iphone,ipad]

  - name: systemButton
    summary: Specifies an iOS system button appearance, as defined in <Titanium.UI.iOS.SystemButton>.
    description: |
        In JavaScript:

            var cancelButton = Ti.UI.createButton({
                systemButton: Ti.UI.iOS.SystemButton.CANCEL
            });

        In Alloy, you can omit the namespace when setting the `systemButton` property on a `<Button>`
        element:

            <Button systemButton="CAMERA"/>

    type: Number
    constants: Titanium.UI.iOS.SystemButton.*
    platforms: [iphone,ipad]

  - name: textAlign
    summary: |
        Text alignment, specified using one of the <Titanium.UI> text alignment constants.
    type: [String,Number]
    constants: Titanium.UI.TEXT_ALIGNMENT_*
    default: <Titanium.UI.TEXT_ALIGNMENT_CENTER>

  - name: tintColor
    summary: Button tint color.
    type: String
    platforms: [android,iphone,ipad]
    osver: {ios: {min: "7.0"}}
    since:
        android: 5.4.0
        iphone: 3.1.3
        ipad: 3.1.3

  - name: title
    summary: Button title.
    type: String

  - name: titleid
    summary: Key identifying a string from the locale file to use for the button title.
    description: Only one of `title` or `titleid` should be specified.
    type: String
    since: "1.5"


  - name: verticalAlign
    summary: |
        Vertical alignment for the text field, specified using one of the
        vertical alignment constants from <Titanium.UI>.
    type: [Number,String]
    constants: Titanium.UI.TEXT_VERTICAL_ALIGNMENT_*
    default: Titanium.UI.TEXT_VERTICAL_ALIGNMENT_CENTER
    platforms: [android]

examples:
  - title: Simple Button Example
    example: |

            var button = Titanium.UI.createButton({
               title: 'Hello',
               top: 10,
               width: 100,
               height: 50
            });
            button.addEventListener('click',function(e)
            {
               Titanium.API.info("You clicked the button");
            });

  - title: Alloy XML Markup
    example: |
        Previous example as an Alloy view.

        button.xml:

            <Alloy>
                <Window id="win" backgroundColor="white">
                    <!-- The title property can also be defined as node text. -->
                    <Button id="button" onClick="doClick" title="Hello"
                        top="10" width="100" height="50" />
                </Window>
            </Alloy>

        button.js:

            function doClick(e){
                Titanium.API.info("You clicked the button");
            };
