---
name: Titanium.UI.iPad.SplitWindow
deprecated:
    since: "3.6.0"
    removed: "6.0.0"
    notes: Use [Titanium.UI.iOS.SplitWindow](Titanium.UI.iOS.SplitWindow) instead.
summary: |
    A SplitWindow is a window that manages the presentation of two side-by-side view
    controllers.
description: |
    You use this class to implement a master-detail interface, in which the left-side view presents
    a list of items and the right-side presents details of the selected item. The SplitView is for
    use exclusively on iPad devices.

    By default, `SplitView` shows both master and detail views in landscape orientation. When the
    device switches into portrait orientation, the detail view occupies the entire screen. The user
    can click a button to bring up the master view as floating, "popover" view. (To show the master
    view in both orientations, set `showMasterInPortrait` to `true`.)

    Use the <Titanium.UI.iPad.createSplitWindow> method or **`<SplitWindow>`** Alloy element to create a
    SplitWindow. A `<SplitWindow>` element only accepts a `<Window>` or `<NavigationWindow>` element
    as children.

    The `masterView` and `detailView` properties are required in the constructor of the SplitWindow
    and cannot be changed once set. In an Alloy application, the first `<Window>` element declared
    inside the `<SplitWindow>` is assigned to `masterView`; the second declared `<Window>` element
    is assigned to `detailView`.

    To add a navigation bar to either the master or detail view of the split window,
    use a <Titanium.UI.NavigationWindow>. See examples below.

    The SplitWindow is a top-level window and cannot be contained within another window or view.
extends: Titanium.UI.Window
platforms: [ipad]
since: "1.2"
excludes:
    properties: [transitionAnimation, swipeToClose]

events:
  - name: visible
    summary: Fired when the `masterView` or `detailView` becomes visible.
    properties:
      - name: button
        summary: |
            For `detail` view type, the button that is automatically wired to control the master
            view popover.
        type: Titanium.UI.Button

      - name: popover
        summary: For either `popover` or `detail` view types, the popover instance.
        type: Titanium.UI.iPad.Popover

      - name: view
        summary: Type of view becoming visible. Either `master`, `popover` or `detail`.
        type: String

properties:
  - name: detailView
    summary: View for the detail view section of the SplitWindow.
    type: Titanium.UI.View
    availability: creation

  - name: masterView
    summary: View for the master view section of the SplitWindow.
    type: Titanium.UI.View
    availability: creation

  - name: showMasterInPortrait
    summary: Determines whether to show the master view in portrait orientation.
    type: Boolean
    default: false
    since: "1.7.2"

examples:
  - title: Split Window
    example: |
        This is an example of a Split Window.

        ``` js
        var detail = Ti.UI.createWindow({backgroundColor: 'white'});
        var label1 = Ti.UI.createLabel({text: 'Detail View'});
        detail.add(label1);
        var detailNav = Ti.UI.createNavigationWindow({window: detail});

        var master = Ti.UI.createWindow({backgroundColor: 'gray'});
        var label2 = Ti.UI.createLabel({text: 'Master View'});
        master.add(label2);
        var masterNav = Ti.UI.createNavigationWindow({window: master});

        var splitWin = Ti.UI.iPad.createSplitWindow({
            detailView: detailNav,
            masterView: masterNav
        });

        splitWin.addEventListener('visible',function(e){
            if (e.view == 'detail'){
                e.button.title = "Master";
                detail.leftNavButton = e.button;
            } else if (e.view == 'master'){
                detail.leftNavButton = null;
            }
        });

        splitWin.open();
        ```

  - title: Alloy XML Markup
    example: |
        Below is an Alloy version of the previous example. The first window is the `masterView` and
        the second window is the `detailView`. You can also use the `<Require>` element to add a
        `<Window>` or `<NavigationWindow>`.

        **views/index.xml:**
        ``` xml
        <Alloy>
            <SplitWindow backgroundColor="white" showMasterInPortrait="true">
                <!-- First window is the masterView -->
                <NavigationWindow>
                    <ListView>
                        <ListSection headerTitle="Some items">
                            <ListItem title="Item 1"></ListItem>
                            <ListItem title="Item 2"></ListItem>
                            <ListItem title="Item 3"></ListItem>
                        </ListSection>
                    </ListView>
                </NavigationWindow>

                <!-- Second window is the detailView -->
                <Window>
                    <Label>I am the detail view.</Label>
                </Window>
            </SplitWindow>
        </Alloy>
        ```

        **controllers/index.js:**
        ``` js
        $.index.addEventListener('visible',function(e){
            if (e.view == 'detail'){
                e.button.title = "Master";
                $.index.detailView.getWindow().leftNavButton = e.button;
            } else if (e.view == 'master'){
                $.index.detailView.getWindow().leftNavButton = null;
            }
        });

        $.index.open();
        ```
