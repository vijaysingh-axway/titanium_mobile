---
name: Titanium.UI.WebView
summary: |
    The web view allows you to open an HTML5 based view which can load either local or remote content.
description: |
    Use the <Titanium.UI.createWebView> method or **`<WebView>`** Alloy element to create a web view.

    Web views are more expensive to create than other native views because of the requirement to
    load the HTML browser into memory.

    The web view content can be any valid web content such as HTML, PDF, SVG or other WebKit supported
    content types.

    #### JavaScript Context in WebViews--Local vs. Remote Content

    JavaScript in the web view executes in its own context.  The web view can interact with this
    content, but most of this functionality is limited to local content.

    **Local Scripts**

    When running local web content
    (that is, content that is included in the application's resources), scripts have
    access to the Titanium namespace. In particular, when running local web content:

    - You can use <Titanium.App.addEventListener> and
      <Titanium.App.fireEvent> to receive and send application-level events.

    - Events can be logged using the <Titanium.API> logging methods.

    **Remote Scripts**

    Scripts downloaded from remote web servers cannot access the Titanium namespace.

    To interact with remote content, wait until the content is loaded, then use the
    [evalJS](Titanium.UI.WebView.evalJS) method to execute a JavaScript expression
    inside the web view and retrieve the value of an expression.

    #### Local JavaScript Files

    During the build process for creating a package, all JavaScript files, that is, any file with a
    '.js' extension, are removed and their content is encrypted and obfuscated into one resource,
    causing these files to not load properly in a WebView if they are loaded externally.

    For JavaScript files referenced in static local HTML files, these JavaScript files are omitted
    from processing and left intact, which means they can be correctly loaded in the WebView.

    For local JavaScript files not referenced in static local HTML files, for example, a
    dynamically-generated HTML file referencing a local JavaScript file,
    rename the file extension of the local JavaScript files to '.jslocal' instead of '.js'.

    The build process for testing your application on the simulator, emulator or device does not
    affect the loading of local JavaScript files.

    #### iOS Platform Implementation Notes

    On the iOS platform, the native web view handles scrolling and other related touch
    events internally. If you add event listeners on the web view **or its parent views**
    for any of the standard touch events (`touchstart`, `click`, and so on), these events
    do not reach the native web view, and the user will not be able to scroll, zoom, click
    on links, and so on. To prevent this default behavior, set
    [willHandleTouches](Titanium.UI.WebView.willHandleTouches) to `false`.

    In other words, you can have either Titanium-style events against the
    web view instance, or internal JavaScript events in the DOM, but not both.

    #### Android Platform Implementation Notes

    **Android 4.4 and Later Support**

    Starting with Android 4.4 (API Level 19), the WebView component is based off of Chromium,
    introducing a number of changes to its rendering engine.  Web content may look or behave
    differently depending on the Android version.  The WebView does not
    have full feature parity with Chrome for Android.

    By default, the Chromium WebView uses hardware acceleration, which may cause content to
    fail to render. If the WebView fails to render the content, the web view will clear
    itself, displaying only the default background color. The following log messages will be
    displayed in the console:

        [WARN] :   AwContents: nativeOnDraw failed; clearing to background color.
        [INFO] :   chromium: [INFO:async_pixel_transfer_manager_android.cc(56)]

    To workaround this issue, you can enable software rendering by setting the WebView's
    [borderRadius](Titanium.UI.WebView.borderRadius) property to a value greater than zero.

    If you are developing local HTML content and size your elements using percentages, the WebView may
    not calculate the sizes correctly when hardware acceleration is enabled, resulting in the same
    behavior previously mentioned.

    To workaround this issue, you can use the previously mentioned workaround to enable software
    rendering, use absolute size values or use the
    [onresize](https://developer.mozilla.org/en-US/docs/Web/API/Window.onresize) event to set the
    heights of the components.  For example, if you have a div element with an id set to `component`
    that needs to use the entire web view, the following callback resizes the content to use the
    full height of the web view:

        window.onresize= function(){
            document.getElementById("component").style.height = window.innerHeight + 'px';
        };

    For more information, see the following topics:

      * [Android Developers: Migrating to WebView in Android 4.4](http://developer.android.com/guide/webapps/migrating.html)
      * [Google Chrome: WebView for Android](https://developer.chrome.com/multidevice/webview/overview)

    **Plugin Support**

    The Android web view supports native plugins such as Flash Player. Note that the Chromium-based
    web view introduced in Android 4.4 does not support the Flash Player plugin.

    To use plugin content, you must set the [pluginState](Titanium.UI.WebView.pluginState) property
    to either [WEBVIEW_PLUGINS_ON](Titanium.UI.Android.WEBVIEW_PLUGINS_ON) or
    [WEBVIEW_PLUGINS_ON_DEMAND](Titanium.UI.Android.WEBVIEW_PLUGINS_ON_DEMAND).

    You must also call [pause](Titanium.UI.WebView.pause) when the current activity is
    paused, to prevent plugin content from continuing to run in the background. Call
    [resume](Titanium.UI.WebView.resume) when the current activity is resumed. You can
    do this by adding listeners for the [Activity.pause](Titanium.Android.Activity.pause)
    and [Activity.resume](Titanium.Android.Activity.resume) events.

    **Accessing Cookies**

    On Android, the web view uses the system cookie store which does not share cookies with the
    <Titanium.Network.HTTPClient> cookie store. Developers can manage their cookies for both
    cookie stores using the methods <Titanium.Network.addHTTPCookie>, <Titanium.Network.addSystemCookie>,
    <Titanium.Network.getHTTPCookies>, <Titanium.Network.getHTTPCookiesForDomain>, <Titanium.Network.getSystemCookies>,
    <Titanium.Network.removeHTTPCookie>, <Titanium.Network.removeHTTPCookiesForDomain>, <Titanium.Network.removeAllHTTPCookies>,
    <Titanium.Network.removeSystemCookie>, <Titanium.Network.removeAllSystemCookies>.

    #### For More Information

    See [Integrating Web
    Content](http://docs.appcelerator.com/platform/latest/#!/guide/Integrating_Web_Content)
    in the Titanium Mobile Guides for more information on using web views, including use
    cases, more code examples, and best practices for web view content.


extends: Titanium.UI.View
excludes:
    methods: [ add, removeAllChildren ]
since: "0.8"
methods:

  - name: setHtml
    summary: Sets the value of [html](Titanium.UI.WebView.html) property.
    description: |
      The `options` parameter can be used to specify two options that affect
      the WebView main content presentation:

      *  `baseURL`. Sets the base URL for the content.
      *  `mimeType`. Sets the MIME type for the content. Defaults to "text/html" if not specified.

      For example:

          setHtml('<html><body>Hello, <a href="/documentation">Titanium</a>!</body></html>',
                  {baseURL:'http://developer.appcelerator.com/'});
    parameters:

      - name: html
        summary: New HTML to display in the web view.
        type: Object

      - name: options
        summary: Optional parameters for the content. Only used by iOS and Android.
        optional: true
        type: Dictionary

  - name: canGoBack
    summary: Returns `true` if the web view can go back in its history list.
    returns:
        type: Boolean

  - name: canGoForward
    summary: Returns `true` if the web view can go forward in its history list.
    returns:
        type: Boolean

  - name: evalJS
    summary: |
        Evaluates a JavaScript expression inside the context of the web view and
        optionally, returns a result.
    description: |
        The JavaScript expression must be passed in as a string. If you are passing in any objects,
        you must serialize them to strings using [stringify](Global).

        The `evalJS` method returns a string representing the value of the expression. For
        example, the following call retrieves the `document.title` element from the
        document currently loaded into the web view.

            var docTitle = myWebView.evalJS('document.title');

        It is not necessary to include `return` in the JavaScript. In fact, the following
        call returns the empty string:

            myWebView.evalJS('return document.title');
    returns:
        type: String
    parameters:

      - name: code
        summary: JavaScript code as a string. The code will be evaluated inside the web view context.
        type: String

  - name: goBack
    summary: Goes back one entry in the web view's history list, to the previous page.

  - name: goForward
    summary: Goes forward one entry in this web view's history list, if possible.

  - name: pause
    summary: Pauses native webview plugins.
    description: |
        Add a `pause` handler to your <Titanium.Android.Activity> and invoke
        this method to pause native plugins. This is important with Flash content
        as it will continue in the background unless this method is invoked.

        Call [resume](Titanium.UI.WebView.resume) to unpause native plugins.
    since: "1.8.0"
    platforms: [android]

  - name: reload
    summary: Reloads the current webpage.

  - name: repaint
    summary: Forces the web view to repaint its contents.
    platforms: [iphone, ipad]

  - name: release
    summary: Releases memory when the web view is no longer needed.
    since: "2.0.0"
    platforms: [android]

  - name: resume
    summary: Resume native webview plugins.
    description: |
        Used to unpause native plugins after calling [pause](Titanium.UI.WebView.pause).

        Add a `resume` handler to your <Titanium.Android.Activity> and invoke
        this method to resume native plugins.
    since: "1.8.0"
    platforms: [android]

  - name: setBasicAuthentication
    summary: |
        Sets the basic authentication for this web view to use on subsequent URl requests.
    platforms: [android, iphone, ipad]
    parameters:

      - name: username
        summary: Basic auth username.
        type: String

      - name: password
        summary: Basic auth password.
        type: String

  - name: stopLoading
    summary: Stops loading a currently loading page.

events:

  - name: beforeload
    summary: Fired before the web view starts loading its content.
    description: |
        This event may fire multiple times depending on the content or URL.  For example, if you set
        the URL of the web view to a URL that redirects to another URL, such as an HTTP URL
        redirecting to an HTTPS URL, this event is fired for the original URL and the redirect URL.

        This event does not fire when navigating remote web pages.
    properties:
      - name: url
        summary: URL of the web document being loaded.

      - name: navigationType
        summary: Constant indicating the user's action.
        type: Number
        constants: Titanium.UI.iOS.WEBVIEW_NAVIGATIONTYPE_*
        platforms: [ipad, iphone]

  - name: error
    summary: Fired when the web view cannot load the content.
    description: |
        The `errorCode` value refers to one of the <Titanium.UI> URL_ERROR constants or, if it does not
        match one of those constants, it refers to a platform-specific constant. The platform-specific
        values are underlying [iOS NSURLError*](https://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Miscellaneous/Foundation_Constants/Reference/reference.html#//apple_ref/doc/uid/TP40003793-CH3g-SW40)
        or [Android WebViewClient ERROR_*](http://developer.android.com/reference/android/webkit/WebViewClient.html) constants.
    properties:
      - name: success
        summary: Indicates a successful operation. Returns `false`.
        type: Boolean

      - name: error
        summary: Error message, if any returned. May be undefined.
        type: String

      - name: code
        summary: |
            Error code.
            If the error was generated by the operating system, that system's error value
            is used. Otherwise, this value will be -1.
        type: Number
        constants: Titanium.UI.URL_ERROR_*

      - name: url
        summary: URL of the web document.
        type: String
        platforms: [iphone, ipad, android]
      - name: message
        summary: Error message. Use error instead.
        type: String
        platforms: [iphone, ipad, android]
        deprecated:
            since: "3.1.0"
      - name: errorCode
        summary: A constant or underlying platform specific error code. Use code instead.
        type: Number
        constants: Titanium.UI.URL_ERROR_*
        platforms: [iphone, ipad, android]
        deprecated:
            since: "3.1.0"

  - name: load
    summary: Fired when the web view content is loaded.
    properties:
      - name: url
        summary: URL of the web document.

  - name: onLoadResource
    summary: Fired when loading resource.
    description: |
        Android only. Notify the host application that the WebView will load the resource specified by the given url.
    platforms: [android]
    since: "3.6.0"
    properties:
      - name: url
        summary: The url of the resource that will load.
        type: String

  - name: sslerror
    summary: Fired when an SSL error occurred.
    description: |
        Android only. This is a synchronous event and the developer can change the value of `ignoreSslError`
        to control if the request should proceed or fail.
    platforms: [android]
    since: "3.3.0"
    properties:
      - name: code
        summary: SSL error code.
        type: Number

  - name: onStopBlacklistedUrl
    summary: Fired when a blacklisted URL is stopped.
    platforms: [android]
    since: 5.4.0
    properties:
      - name: url
        summary: The URL of the web document that is stopped.
    deprecated:
        since: "6.1.0"
        notes: Use the  cross-platform `blacklisturl` event instead.

  - name: blacklisturl
    summary: Fired when a blacklisted URL is stopped.
    platforms: [android, iphone, ipad]
    since: {android: "6.1.0", iphone: "6.1.0", ipad: "6.1.0"}
    properties:
      - name: url
        summary: The URL of the web document that is stopped.

properties:

  - name: allowsLinkPreview
    summary: |
        A Boolean value that determines whether pressing on a link displays a preview of the
        destination for the link.
    description: |
        This property is available on devices that support 3D Touch. Default value is `false`.

        If you set this value to `true` for a web view, users (with devices that support 3D Touch)
        can preview link destinations, and can preview detected data such as addresses, by pressing on links.
        Such previews are known to users as peeks. If a user presses deeper, the preview navigates (or pops,
        in user terminology) to the destination. Because pop navigation switches the user from your app to
        Safari, it is opt-in, by way of this property, rather default behavior for this class.
    type: Boolean
    default: false
    since: "5.4.0"
    osver: {ios: {min: "9.0"}}
    platforms: [iphone]

  - name: blacklistedURLs
    summary: |
        An array of url strings to blacklist.
    description: |
        An array of url strings to blacklist. This will stop the webview from going to urls listed in
        the blacklist. Note, this only applies in the links clicked inside the webview. The first website
        that is loaded will not be stopped even if it matches the blacklist.
    type: Array<String>
    since: {android: "5.4.0", iphone: "6.1.0", ipad: "6.1.0"}
    platforms: [android, iphone, ipad]
    availability: creation

  - name: data
    summary: Web content to load.
    description: |
        Android only supports loading data from a `Blob`, not a `File`.

        See also: [url](Titanium.UI.WebView.url) and [html](Titanium.UI.WebView.html).
    type: [Titanium.Blob, Titanium.Filesystem.File]

  - name: disableBounce
    summary: |
        Determines whether the view will bounce when scrolling to the edge of the scrollable region.
    description: |
        Set to `true` to disable the bounce effect.
    type: Boolean
    default: false
    platforms: [iphone, ipad]

  - name: disableContextMenu
    summary: Determines whether or not the webview should not be able to display the context menu.
    description: |
        Set to `true` to disable the context menu. Note that disabling the context menu will
        also disable the text selection on iOS.
    type: Boolean
    default: false
    platforms: [iphone, ipad, android]
    since: "6.1.0"

  - name: enableJavascriptInterface
    summary: Enable adding javascript interfaces internally to webview prior to JELLY_BEAN_MR1 (Android 4.2)
    description: |
        This property is introduced to prevent a security issue with older devices (< JELLY_BEAN_MR1)
    type: Boolean
    platforms: [android]
    since: "3.6.0"
    availability: creation
    default: true

  - name: handlePlatformUrl
    summary: Lets the webview handle platform supported urls
    description: |
        By default any urls that are not handled by the Titanium platform but can be handled by the
        shared application are automatically sent to the shared application and the webview does not
        open these. When this property is set to `true` the webview will attempt to handle these
        urls and they will not be sent to the shared application. An example is links to telephone
        numbers.
    type: Boolean
    platforms: [iphone, ipad]
    since: "3.3.0"
    default: undefined. Behaves as if false

  - name: hideLoadIndicator
    summary: Hides activity indicator when loading remote URL.
    type: Boolean
    platforms: [iphone, ipad]
    since: "3.0.0"
    default: false

  - name: html
    summary: HTML content of this web view.
    description: |

        See [setHtml](Titanium.UI.WebView.setHtml) for additional parameters that can be
        specified when setting HTML content.

        The web view's content can also be set using the [data](Titanium.UI.WebView.data) or
        [url](Titanium.UI.WebView.url) properties.

        See also: [data](Titanium.UI.WebView.data) and [url](Titanium.UI.WebView.url).
    type: String

  - name: keyboardDisplayRequiresUserAction
    summary: A Boolean value indicating whether web content can programmatically display the keyboard.
    description: |
        When this property is set to true, the user must explicitly tap the elements in the web view
        to display the keyboard (or other relevant input view) for that element. When set to false,
        a focus event on an element causes the input view to be displayed and associated with
        that element automatically.
    type: Boolean
    default: undefined but behaves as true
    since: "6.1.0"
    platforms: [iphone,ipad]

  - name: ignoreSslError
    summary: Controls whether to ignore invalid SSL certificates or not.
    description: |
        If set to `true`, the web page loads despite having an invalid SSL certificate.
        If set to `false`, a web page with an invalid SSL certificate does not load.

        iOS Note: As soon as you set this property to `true`, iOS will cache the response
        for the lifetime of the current web view.
    type: Boolean
    default: undefined but behaves as false
    since: {android: "3.0.0", iphone: "6.0.2", ipad: "6.0.2"}
    platforms: [android, iphone, ipad]

  - name: loading
    summary: Indicates if the webview is loading content.
    type: Boolean
    platforms: [iphone, ipad]

  - name: onCreateWindow
    summary: |
        Callback function called when there is a request for the application to create a new window
        to host new content.
    description: |
        For example, the request is triggered if a web page wants to open a URL in a new
        window.  By default, Titanium will open a new full-size window to host the new content.
        Use the callback to override the default behavior.

        The callback needs to create a new WebView object to host the content in and add the WebView to the
        application UI. The callback must return either a WebView object to host the content in or `null` if
        it does not wish to handle the request.

        The callback is passed a dictionary with two boolean properties:

          * `isDialog`: set to true if the content should be opened in a dialog window rather than a
            full-size window.
          * `isUserGesture`: set to true if the user initiated the request with a gesture, such as
            tapping a link.

        The following example opens new web content in a new tab rather than a new window:

            var tabGroup = Ti.UI.createTabGroup(),
                win = Ti.UI.createWindow(),
                tab = Ti.UI.createTab({window: win, title: 'Start Page'}),
                webview = Ti.UI.createWebView({ url:'index.html'});

            webview.onCreateWindow = function(e) {
                var newWin = Ti.UI.createWindow(),
                    newWebView = Ti.UI.createWebView(),
                    newTab = Ti.UI.createTab({window: newWin, title: 'New Page'});
                newWin.add(newWebView);
                tabGroup.addTab(newTab);
                return newWebView;
            };

            win.add(webview);
            tabGroup.addTab(tab);
            tabGroup.open();

    type: Callback<Object>
    platforms: [android]
    since: "2.1.0"

  - name: overScrollMode
    summary: Determines the behavior when the user overscrolls the view.
    type: Number
    constants: Titanium.UI.Android.OVER_SCROLL_*
    default: Titanium.UI.Android.OVER_SCROLL_ALWAYS
    platforms: [android]
    since: "3.1.0"

  - name: cacheMode
    summary: Determines how a cache is used in this web view.
    type: Number
    constants: Titanium.UI.Android.WEBVIEW_LOAD_*
    default: <Titanium.UI.Android.WEBVIEW_LOAD_DEFAULT>
    platforms: [android]
    since: "3.2.0"

  - name: pluginState
    summary: Determines how to treat content that requires plugins in this web view.
    description: |
        This setting affects the loading of content that requires web plugins, such as
        Flash Player.

        To use the Flash Player plugin, hardware acceleration must be enabled for your
        application. To enable hardware acceleration, add the `tool-api-level` and
        `manifest` elements shown below inside the `android` element in your `tiapp.xml` file.

            <android xmlns:android="http://schemas.android.com/apk/res/android">
                <tool-api-level>11</tool-api-level>
                <manifest>
                    <application android:hardwareAccelerated="true"/>
                </manifest>
            </android>

        See Android documentation for
        [WebSettings.PluginState](http://developer.android.com/reference/android/webkit/WebSettings.PluginState.html).

        This property only works on Android devices at API Level 8 or greater.
    type: Number
    constants: Titanium.UI.Android.WEBVIEW_PLUGINS_*
    platforms: [android]
    since: "1.8.0"
    osver: {android: {min: "2.2"}}
    default: <Titanium.UI.Android.WEBVIEW_PLUGINS_OFF>

  - name: scrollsToTop
    summary: Controls whether the scroll-to-top gesture is effective.
    description: |
        The scroll-to-top gesture is a tap on the status bar; The default value of this property is true.
        This gesture works when you have a single visible web view.
        If there are multiple table views, web views, text areas, and/or scroll views visible,
        you will need to disable (set to false) on the above views you DON'T want this
        behaviour on. The remaining view will then respond to scroll-to-top gesture.
    type: Boolean
    default: true
    platforms: [iphone,ipad]
    since: 2.0.0

  - name: showScrollbars
    summary: If `true`, scrollbars are displayed if content is larger than the web view.
    type: Boolean
    platforms: []
    since: "1.8.2"
    default: true

  - name: enableZoomControls
    summary: If `true`, zoom controls are enabled.
    type: Boolean
    platforms: [android]
    since: "1.8.0"
    default: true

  - name: scalesPageToFit
    summary: If `true`, scale contents to fit the web view.
    description: |
        On iOS, setting this to `true` sets the initial zoom level to show the entire
        page, and enables the user to zoom the web view in and out. Setting this to
        `false` prevents the user from zooming the web view.

        On Android, only controls the initial zoom level.
    platforms: [android, iphone, ipad]
    type: Boolean
    default: |
        `false` on iOS. On Android, `false` when content is specified as a local URL,
        `true` for any other kind of content (remote URL, `Blob`, or `File`).

  - name: url
    summary: URL to the web document.
    description: |
        This property changes as the content of the webview changes (such as when the user
        clicks a hyperlink inside the web view).

        See also: [data](Titanium.UI.WebView.data) and [html](Titanium.UI.WebView.html).
    type: String

  - name: userAgent
    summary: The User-Agent header used by the web view when requesting content.
    description: |
        On the iOS platform, this is not per-webview. Once you have set this property for a webview
        it will not change for same. But while creating new webview it can be changed to new user agent.
    type: String
    default: System default user-agent value.
    platforms: [android, iphone, ipad]
    since: {android: "2.0.0", iphone: "6.1.0", ipad: "6.1.0"}

  - name: willHandleTouches
    summary: Explicitly specifies if this web view handles touches.
    description: |
        On the iOS platform, if this web view **or any of its parent views** have touch
        listeners, the Titanium component intercepts **all** touch events. This
        prevents the user from interacting with the native web view components.

        Set this flag to `false` to disable the default behavior. Setting this property to `false`
        allows the user to interact with the native web view and still honor any `touch` events sent to
        its parents. No `touch` events will be generated when the user interacts with the web view itself.

        Set this flag to `true` if you want to receive touch events from the web view and
        the user does not need to interact with the web content directly.

        This flag is `true` by default to retain backwards compatibility with previous
        behavior.
    type: Boolean
    platforms: [iphone, ipad]
    since: "1.8.2"
    default: true

  - name: lightTouchEnabled
    summary: Enables using light touches to make a selection and activate mouseovers.
    description: |
        Setting this property solves the problem of web links with specific length not triggering a link click in Android.

        This is only an Android specific property and has no effect starting from API level 18.

        This flag is `true` by default to retain backwards compatibility with previous
        behavior.
    type: Boolean
    platforms: [android]
    since: "3.2.0"
    default: true

  - name: requestHeaders
    summary: Sets extra request headers for this web view to use on subsequent URL requests.
    description: |
        Setting this property allows you to set custom headers to the URL requests.
        The parameter will be key-value pairs: `{"Custom-field1":"value1", "Custom-field2":"value2"}`

        On Android you should avoid Calling `setRequestHeaders()` right after `createWebView()`. Use the `requestHeaders` property
        inside `createWebView()` or put it inside the window `open` event.
    type: Dictionary
    platforms: [android,iphone,ipad]
    since: "6.1.0"


examples:
  - title: Basic Web View to External URL
    example: |
        Create a web view to a remote URL and open the window as modal.

              var webview = Titanium.UI.createWebView({url:'http://www.appcelerator.com'});
            	var window = Titanium.UI.createWindow();
            	window.add(webview);
            	window.open({modal:true});

  - title: Alloy XML Markup
    example: |
        Previous example as an Alloy view.

            <Alloy>
                <Window id="win" modal="true">
                    <WebView id="webview" url="http://www.appcelerator.com" />
                </Window>
            </Alloy>
