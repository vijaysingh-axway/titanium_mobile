name: Modules.CloudPush
summary: |
    Provides support for Android push notifications.
description: |
    The CloudPush module supports Android push notifications for a device by providing a connection
    to the push notification server to the device to receive push notifications and to optionally
    present a tray notification to the user when a new push notification is received.

    This module is only used to receive push notifications.  For information on configuring your
    project to send push notifications, see <Modules.Cloud.PushNotifications>.

    #### Push Protocols

    The CloudPush module only supports [Firebase Cloud Messaging](https://firebase.google.com/docs/cloud-messaging) (FCM) for push
    notifications.

    #### Project Configuration

    This module must also be added to the modules section in your tiapp.xml. This can be done using the Modules list in
    the Titanium Studio TiApp Editor, or by editing the XML directly and adding the following line to the modules
    element:

        <module platform="android">ti.cloudpush</module>

    Your app must prove that it is allowed to talk to Arrow. This keeps your data secure by preventing anyone from
    making requests to Arrow that impersonate your app.

    Titanium Studio creates a pair of keys (Development and Production) for each Titanium application depending on the
    user preference specified during new project creation. This pair of keys will be stored in `tiapp.xml` and one of the
    keys will be used during application build depending on the build type (development or production).

    To use push notifications, in the `tiapp.xml` file, you need to specify the Arrow Push keys and push
    type. The supported properties in `tiapp.xml` are:

        <!-- Property keys for Arrow Push (required) -->
        <property name="acs-api-key-development" type="string">YOUR DEVELOPMENT API KEY HERE</property>
        <property name="acs-api-key-production" type="string">YOUR PRODUCTION API KEY HERE</property>
        <property name="acs-api-key" type="string">YOUR API KEY HERE</property>

    If a deployment-specific setting is provided (production or development) then that value will be used for the current deployment environment.

    *WARNING*: The default properties of this module are used until you set a property for the first time. Because the
    properties are persisted to the device settings (via <Titanium.App.Properties>), the most recent value you set will
    always be used.

    #### Google Services JSON

    As of Titanium 9.1.0 (using `ti.cloudpush` module version 7.1.0), you must download a `google-services.json` file
    from Google's [Firebase Console](https://console.firebase.google.com/) website and add it your Titanium project.
    This file provides the keys needed to retrieve a device token for push notifications.

    For Alloy projects, download the file to folder...

        ./app/platform/android

    For Classic projects, download the file to folder...

        ./platform/android

    #### Virtual Private Cloud Configuration

    If you are using a virtual private cloud (VPC), you need to configure your Arrow Push dispatcher
    URL in order to send push notifications with FCM.  In the `tiapp.xml` file, add the `acs-push-api-url`
    application property and set the node text to the push dispatcher URL provided to you.  The URL may
    be the same as your custom ArrowDB endpoint and have deployment-specific settings, that is, two
    URLs--one for production and another for the development environment.

        <ti:app>
            <property name="acs-push-api-url-production">https://api-prod.fooinc.com</property>
            <property name="acs-push-api-url-development">https://api-dev.fooinc.com</property>
        </ti:app>

    #### Grouped Notifications

    If the device receives multiple push notifications from the application, Android can group these
    notifications together as one notification.

    To use grouped notifications, add a grouped notification template to either the `tiapp.xml` file
    or the `i18n` folder for internationalized versions:

    `tiapp.xml`:

        <property name="acs-grouped-notification-message-development" type="string">You have $number$ unread messages.</property>
        <property name="acs-grouped-notification-message-production" type="string">You have $number$ unread messages.</property>
        -or-
        <property name="acs-grouped-notification-message" type="string">You have $number$ unread messages.</property>

    `i18n/es/strings.xml` (example for Spanish):

        <?xml version="1.0" encoding="utf-8"?>
        <resources>
           <string name="acs_grouped_notification_message">Tienes $number$ mensajes no leidos.</string>
        </resources>

    The `$number$` variable indicates the number of unread messages.

platforms: [android]
since: "2.0.0"
extends: Titanium.Module
methods:
  - name: retrieveDeviceToken
    summary: Asynchronously retrieves the application specific device token.
    description: |
        This token is used in calls to Appcelerator Cloud Services to subscribe or unsubscribe to push notification
        channels. This token is unique to each application and device.
    parameters:
      - name: config
        summary: Dictionary specifying token retrieval related options. 
        type: CloudPushNotificationConfig

  - name: clearStatus
    summary: Clears the CloudPush module's stored status, including the push type, device token, GCM sender ID, etc.
    description: |
        This method is useful to transfer the push type from MQTT to GCM, or changing the GCM sender ID when needed.
        After calling this method, the CloudPush module is reinitialized. Use `retrieveDeviceToken` to
        get the device token again.
    since: 3.1.2

properties:
  - name: enabled
    summary: Whether or not this device will receive push notifications.
    deprecated:
        since: 3.2.0
        notes: | 
            This property was only required to enable push notifications for the legacy MQTT
            protocol.
    type: Boolean
    default: false

  - name: showTrayNotification
    summary: Whether or not to show a tray notification when a new push is received.
    description: |
        If your payload is only a string, it will be used as the contentText and tickerText, and your application's name
        will be used as the contentTitle with a system icon.
        
        Note that in your payload, you can customize this tray notification using any of the properties of a
        <Titanium.Android.Notification>, except for contentIntent and deleteIntent (those are automatically set).
    type: Boolean
    default: true

  - name: showAppOnTrayClick
    summary: Whether or not clicking the tray notification will bring your application to the foreground.
    description: |
        This is only applicable if you have set [showTrayNotification](Modules.CloudPush.showTrayNotification) to true.
    type: Boolean
    default: true

  - name: showTrayNotificationsWhenFocused
    summary: Whether or not to show tray notifications when your application is in the foreground.
    description: |
        Instead of showing a notification, the [callback](Modules.CloudPush.callback) event will be immediately fired
        instead.
        
        This is only applicable if you have set [showTrayNotification](Modules.CloudPush.showTrayNotification) to true.
    type: Boolean
    default: false

  - name: focusAppOnPush
    summary: Whether or not your application is brought to the foreground whenever a new push is received.
    description: |
        Note that this behavior is rather disruptive to users, and is strongly discouraged.
    type: Boolean
    default: false

  - name: singleCallback
    summary: Set to true to trigger a single callback for the selected push notification when multiple push notifications are displayed in the tray.
    description: |
        In previous versions of the module, clicking on one of the application's push notifications triggered the callbacks for all of the application's push notifications.
        The new module retains the same behavior by default.
        
        Set this property to true to receive a single callback for the push notification selected by the user, regardless of how many push notifications are displayed in the tray.
    type: Boolean
    default: false

  - name: SUCCESS
    summary: Code returned from <Modules.PlayServices.isGooglePlayServicesAvailable>. Google Play services is available, and the connection is successful.
    type: Number
    permission: read-only
    since: 3.4.1
    platforms: [android]
    
  - name: SERVICE_MISSING
    summary: Code returned from <Modules.PlayServices.isGooglePlayServicesAvailable>. Google Play services is not installed on the device.
    type: Number
    permission: read-only
    since: 3.4.1
    platforms: [android]
    
  - name: SERVICE_VERSION_UPDATE_REQUIRED
    summary: Code returned from <Modules.PlayServices.isGooglePlayServicesAvailable>. Google Play services is out of date.
    type: Number
    permission: read-only
    since: 3.4.1
    platforms: [android]
    
  - name: SERVICE_DISABLED
    summary: Code returned from <Modules.PlayServices.isGooglePlayServicesAvailable>. Google Play services has been disabled on this device.
    type: Number
    permission: read-only
    since: 3.4.1
    platforms: [android]
    
  - name: SERVICE_INVALID
    summary: Code returned from <Modules.PlayServices.isGooglePlayServicesAvailable>. The version of Google Play services installed on this device is not authentic.
    type: Number
    permission: read-only
    since: 3.4.1
    platforms: [android]
events:
  - name: trayClickLaunchedApp
    summary: Fired when a tray notification is shown and the application is not running.
    description: |
        Touching it launches the app, and fires this event.
        
        This is only applicable if you have set [showTrayNotification](Modules.CloudPush.showTrayNotification) to true.
    properties:
      - name: payload
        summary: A JSON string of your data payload. Use JSON.parse to turn this into an object you can use.
        type: String

  - name: trayClickFocusedApp
    summary: Fired when a tray notification is shown and the application is already running.
    description: |
        Touching it focuses the app, and fires this event.
        
        This is only applicable if you have set [showTrayNotification](Modules.CloudPush.showTrayNotification) to true.
    properties:
      - name: payload
        summary: A JSON string of your data payload. Use JSON.parse to turn this into an object you can use.
        type: String

  - name: deviceTokenExpired
    summary: Fired when last retrieved token has become invalid.
    description: |
        Fired when the last retrieved device token has expired and has become invalid, meaning the token
        can no longer be used to send push notifications. You'll need to call
        [retrieveDeviceToken()](Modules.CloudPush.retrieveDeviceToken) again to acquire a new token.

        This typically occurs when:

        * The Firebase "Instance ID" has been deleted.
        * The app is restored from backup on a different device.
        * The app has been uninstalled and re-installed.
        * The end-user clears the app's data.
    since: 9.1.0

  - name: callback
    summary: Fired whenever a push notification is received.
    description: |
        If your application is not running when a push is received, the push will be saved in a queue until the next
        time you add an event listener for this.

        This will only be fired once per push notification.

        This event will be fired at different times depending on your settings and the application's present state
        (foreground, background, or not running at all). When [focusAppOnPush](Modules.CloudPush.focusAppOnPush) is true, this
        will fire as soon as you receive a push. When [showTrayNotification](Modules.CloudPush.showTrayNotification) is true, this
        will fire as soon as the user touches the tray notification to focus your application. Or, if
        [showTrayNotificationsWhenFocused](Modules.CloudPush.showTrayNotificationsWhenFocused) is false, and your application is
        in the foreground, it will be called right away. If both [focusAppOnPush](Modules.CloudPush.focusAppOnPush)
        and [showTrayNotification](Modules.CloudPush.showTrayNotification) are false, this will fire the next time your
        application is launched and you add an event listener for it.

        You can use the [trayClickLaunchedApp](Modules.CloudPush.trayClickLaunchedApp) and
        [trayClickFocusedApp](Modules.CloudPush.trayClickFocusedApp) events to distinguish between the various ways
        a push notification can return a user to your application.
    properties:
      - name: payload
        summary: A JSON string of your data payload. Use JSON.parse to turn this into an object you can use.
        type: String
examples:
  - title: Listening for Push Notifications
    example: |
        ```js
        const CloudPush = require('ti.cloudpush');

        // Show notifications in status bar while app is backgrounded.
        CloudPush.showTrayNotification = true;

        // Show notifications in status bar while app is in the foreground.
        CloudPush.showTrayNotificationsWhenFocused = true;

        // Fetches app's push notification token and registers it with the cloud if changed.
        function registerForPushNotifications() {
            CloudPush.retrieveDeviceToken({
                success: function (e) {
                    // We've successfully obtained a token.
                    Ti.API.info('Device Token: ' + e.deviceToken);

                    // You should call "ti.cloud" module's PushNotifications subscribe() method next,
                    // but only after successfully logging in to the cloud.
                },
                error: function (e) {
                    // We've failed to acquire a token.
                    Ti.API.error('Failed to register for CloudPush. Reason: ' + e.error);
                }
            });
        }

        // Always fetch token from system on app startup in case it changed since last startup.
        registerForPushNotifications();

        // Called for every push notification received by the app.
        CloudPush.addEventListener('callback', function (e) {
            alert(e.payload);
        });

        // Called when last token has expired and has become invalid.
        // We must obtain a new token in order for this app to keep receiving push notifications.
        CloudPush.addEventListener('deviceTokenExpired', function (e) {
            Ti.API.info('Previous CloudPush token has expired. Acquiring a new token.');
            registerForPushNotifications();
        });

        // Called when cold-starting app by tapping notification in status bar.
        CloudPush.addEventListener('trayClickLaunchedApp', function (e) {
            Ti.API.info('Tray Click Launched App (app was not running)');
        });

        // Called when resuming app from background by tapping notification in status bar.
        CloudPush.addEventListener('trayClickFocusedApp', function (e) {
            Ti.API.info('Tray Click Focused App (app was already running)');
        });
        ```
---
name: CloudPushNotificationConfig
summary: |
    Simple object for specifying token retrieval options to [retrieveDeviceToken](Modules.CloudPush.retrieveDeviceToken).
properties:
  - name: success 
    summary: |
        Callback function called when the push registration is successfully completed.
    type: Callback<CloudPushNotificationSuccessArg>
  - name: error
    summary: |
        Callback function called when an error occurs during registration.
    type: Callback<CloudPushNotificationErrorArg>

---
name: CloudPushNotificationSuccessArg
summary: |
    A simple object passed to the [retrieveDeviceToken](Modules.CloudPush.retrieveDeviceToken) success callback.
properties: 
  - name: deviceToken 
    summary: The device token which this device was registered for.
    type: String

---
name: CloudPushNotificationErrorArg
summary: |
    A simple object passed to the [retrieveDeviceToken](Modules.CloudPush.retrieveDeviceToken) error callback.
properties: 
  - name: error 
    summary: Description of the error.
    type: String
